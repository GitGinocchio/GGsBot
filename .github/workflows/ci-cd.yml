name: Continuous Integration and Deployment (CI/CD)

on:
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: write
  issues: write
  packages: write

jobs:
  semver:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Semantic Version Release
        id: semver
        uses: python-semantic-release/python-semantic-release@v9.21.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          git_committer_name: "github-actions"
          git_committer_email: "actions@users.noreply.github.com"
          commit: false
          tag: false
          push: false
          changelog: true
          vcs_release: false

      - name: Commit updated files
        id: changes
        run: |
          if git diff --quiet; then
            echo "changed=false"
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true"
            echo "changed=true" >> $GITHUB_OUTPUT
            git config user.name "github-actions"
            git config user.email "actions@users.noreply.github.com"
            git add .
            git commit -m "chore(release): bump version and update changelog"
          fi

      - name: Create Pull Request with changes
        uses: peter-evans/create-pull-request@v6
        if: steps.changes.outputs.changed == 'true'
        id: pull_request
        with:
          token: ${{ secrets.RELEASE_TOKEN }}
          commit-message: "chore(release): bump version and changelog"
          title: "chore(release): bump version and changelog"
          body: |
            This PR was automatically created to update the version and changelog.
          branch: release/${{ steps.semver.outputs.version }}
          base: main
          delete-branch: true

      - name: Enable Pull Request Automerge
        if: steps.pull_request.outputs.pull-request-url != ''
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.RELEASE_TOKEN }}
          pull-request-number: ${{ steps.pull_request.outputs.pull-request-number }}
          merge-method: squash

  test:
    runs-on: ubuntu-latest
    needs: semver

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v3
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f ./.dev/requirements.txt ]; then pip install -r ./.dev/requirements.txt; fi
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Check dependencies conflicts
        run: python -m pip check

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        run: |
          export CONFIG_PATH=$(pwd)/config/config.test.jsonc
          export PYTHONPATH=$(pwd)/src
          pytest -v ./tests/

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract Version
        id: extract_version
        run: |
          VERSION=$(cat src/__init__.py | grep '__version__' | cut -d '"' -f 2)
          echo "Version: $VERSION"
          echo "::set-output name=version::$VERSION"

      - name: Build and Save Docker image as tar
        run: |
          docker build -t ggsbot:${{ steps.extract_version.outputs.version }} .
          docker save ggsbot:${{ steps.extract_version.outputs.version }} -o ggsbot.tar

      - name: Save Docker image as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: ggsbot.tar

  release:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-release-${{ github.ref_name }}
      cancel-in-progress: false
    needs:
      - build

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ./ggsbot.tar
          tag_name: ${{ needs.build.outputs.version }}
