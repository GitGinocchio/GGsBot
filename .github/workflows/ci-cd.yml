# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Continous Integration and Deployment (CI/CD)


on:
  push:
    branches: [ "main" ]
  #pull_request:
    #branches: [ "main" ]

permissions:
  contents: write
  issues: write
  packages: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
    
      - name: Set up Python 3.12
        uses: actions/setup-python@v3
        with:
          python-version: "3.12"
    
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip

          if [ -f ./.dev/requirements.txt ]; then pip install -r ./.dev/requirements.txt; fi

          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Check dependencies conflicts
        run: |
          python -m pip check
    
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
      - name: Test with pytest
        run: |
          export CONFIG_PATH=$(pwd)/config/config.test.jsonc
          export PYTHONPATH=$(pwd)/src
          pytest -v ./tests/

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Save Docker image as tar
        run: |
          docker build -t ggsbot:latest .
          docker save ggsbot:latest -o ggsbot.tar

      - name: Save Docker image as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: ggsbot.tar

  release:
    runs-on: ubuntu-latest
    needs:
      - test
      - build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Run python-semantic-release
        uses: python-semantic-release/python-semantic-release@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          commit: false
          tag: true
          push: false
          changelog: true

      - name: Tag Docker image with version
        run: |
          docker load -i ./docker-image/ggsbot.tar
          docker tag ggsbot:latest ggsbot:${{ steps.semantic_release.outputs.version }}
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ./docker-image/ggsbot.tar
          tag_name: ${{ steps.semantic_release.outputs.version }}