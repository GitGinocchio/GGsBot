name: Prepare Release


on:
  push: 
    branches: [ main ]
    #paths:
    #  - "**/*.py"

jobs:
  run-condition:
    runs-on: ubuntu-latest
    if: (!startsWith(github.ref_name, 'release/'))
    steps:
      - name: Placeholder step
        run: echo "This job runs only if the branch name does not start with 'release/'."

  test:
    runs-on: ubuntu-latest
    needs: run-condition

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v3
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f ./.dev/requirements.txt ]; then pip install -r ./.dev/requirements.txt; fi
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Check dependencies conflicts
        run: python -m pip check

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        run: |
          export CONFIG_PATH=$(pwd)/config/config.test.jsonc
          export PYTHONPATH=$(pwd)/src
          pytest -v ./tests/

  prepare-release:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install python-semantic-release
        run: |
          python -m pip install --upgrade pip
          pip install python-semantic-release

      - name: Run semantic-release to update version and changelog
        id: semver
        run: |
          echo "version=$(semantic-release version --print)"
          echo "prev_version=$(semantic-release version --print-last-released)"
          echo "tag=$(semantic-release version --print-tag)"
          echo "prev_tag=$(semantic-release version --print-last-released-tag)"

          echo "version=$(semantic-release version --print)" >> $GITHUB_OUTPUT
          echo "prev_version=$(semantic-release version --print-last-released)" >> $GITHUB_OUTPUT
          echo "tag=$(semantic-release version --print-tag)" >> $GITHUB_OUTPUT
          echo "prev_tag=$(semantic-release version --print-last-released-tag)" >> $GITHUB_OUTPUT

          semantic-release version --no-vcs-release --no-tag --no-push --changelog --no-commit
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}

      - name: Commit updated files
        id: changes
        run: |
          if git diff --quiet; then
            echo "changed=false"
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true"
            echo "changed=true" >> $GITHUB_OUTPUT
            
            git config user.name "github-actions"
            git config user.email "actions@users.noreply.github.com"
            
            git add .
            
            git commit -m "chore(release): bump version and update changelog"
          fi

      - name: Create Pull Request with changes
        uses: peter-evans/create-pull-request@v6
        if: steps.changes.outputs.changed == 'true'
        id: pull_request
        with:
          token: ${{ secrets.RELEASE_TOKEN }}
          commit-message: "chore(release): bump to ${{ steps.semver.outputs.version }} (${{ steps.semver.outputs.tag }})"
          title: "chore(release): bump to ${{ steps.semver.outputs.version }} (${{ steps.semver.outputs.tag }})"
          body: |
            This PR was automatically created to update the version and/or changelog.
      
            ### ðŸ”– Release Information
            - **Previous Version:** `${{ steps.semver.outputs.prev_version }}`
            - **New Version:** `${{ steps.semver.outputs.version }}`
            - **Previous Tag:** `${{ steps.semver.outputs.prev_tag }}`
            - **New Tag:** `${{ steps.semver.outputs.tag }}`
      
            Once this PR is merged, the new version will be tagged and released.
          branch: release/${{ steps.semver.outputs.version }}
          base: main
          delete-branch: true

      - name: Enable Pull Request Automerge
        if: steps.pull_request.outputs.pull-request-url != ''
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.RELEASE_TOKEN }}
          pull-request-number: ${{ steps.pull_request.outputs.pull-request-number }}
          merge-method: squash